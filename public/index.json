[{"content":"2-1 Writing a Simple Program Printing a Pun Here\u0026rsquo;s the pun: To C, or not to C: that is the question.\npun.c 라고 이름을 지을 아래 프로그램은, 실행될 때 위 메시지를 보여준다.\n#include \u0026lt;stdio.h\u0026gt; int main(void) { printf(\u0026#34;To C, or not to C: taht is the question. \\n\u0026#34;); return 0; } 섹션 2-2에서 자세한 설명. 지금은 간단하게만\n\u0026ldquo;#include \u0026lt;stdio.h\u0026gt;\u0026rdquo;. 이것은 C\u0026rsquo;s standard I/O(INPUT/OUTPUT)을 include 하기 위해 필요하다.\n프로그램의 executable code는 main 안에 있다. main은 \u0026ldquo;main\u0026quot;프로그램을 나타낸다.\nprintf는 nicely formatted output을 produce하는 standard I/O lib의 function이다. \u0026ldquo;\\n\u0026quot;은 printf에게 advance to the next line after printing the message하라고 말한다.\n\u0026ldquo;return 0;\u0026ldquo;은 프로그램이 끝났을 때 Operating System에게 0의 값을 return하라는 것을 나타낸다.\nCompiling and Linking pun.c를 run하려면\ncreate a file named pun.c containing the program Convert the program to a form that the machine can execute. For C programs usually involves three steps:\nProcessing The program is first given to a preprocessor, which obeys ommands that begin with #(known as directives). A preprocessor is like an editor. It can add things to the program and make modifications.\nCompiling The modified program now goes to a compiler, which translates it into machine instructions(Object Code). The program isn\u0026rsquo;t quite ready to run yet.\nLinking A linker combines the object code with any additional code needed to yield a complete executable program. This additional code includes lib functions (ex) printf) that used in the program.\n다행이도, this process is often automated. 사실 preprocessor는 compiler와 통합되어 있는 경우가 많음. 아마 그래서 알아차리지 못할수도. compile하고 link하는데 쓰이는 commands는 컴파일러와 OS에 따라 다르다. 간단하게 gcc를 소개하자면\nGCC COMPILER one of the most popular C compilers supplied with Linux, but now available for many other platforms EX) to compile pun.c -\u0026gt; gcc -o pun pun.c Intergrated Development Environments(IDE) A software package that allows us to edit,compile,link,execute, and even debug a program without leaving the environment.\nThe General Form of a Simple Program Simple C programs have the form\ndirectives\nint main(void) { statements } Notice how the braces show where main begins and ends. C uses { and } in much the same way that some other languages use words like begin and end.\nThis illustrates a general oint about C:\nit relies heavily on abbreviations and special symbols(-\u0026gt; C programs are concise)\nC programs rely on 3 key language features: directives(editing commands that modify the program prior to compilation),\nfunction(named blocks of executable code, of which main is an example),\nand statements(commands to be performed when the program is run)\nDirectives Before a C program is compiled, it is first edited by a preprocessor.\nCommands intended for the preprocessor are called directives.(more detail -\u0026gt; ch 14,15)\nFor now, only interested in #include\n\u0026ldquo;#include \u0026lt;stdio.h\u0026gt;\u0026rdquo;: This directive states taht the information in \u0026lt;stdio.h\u0026gt; is to be \u0026ldquo;included\u0026rdquo; into the program beofre it is compiled. It contains info about C\u0026rsquo;s standard I/O lib. C has a number of headers like \u0026lt;stdio.h\u0026gt;; each contains info about some park of the standard library.\nThe ability to perform input and output is provided instead by functions in the standard library.\nDirectives always begin with a # character.(-\u0026gt; distinguishes them from others in a C program) By default, directives are one line long.(No semicolon, etc..)\nFunctions They are like \u0026ldquo;procedures\u0026rdquo; or \u0026ldquo;subroutines\u0026rdquo; in other programming langs.\nThey\u0026rsquo;re the building blocks from which programs are constructed.\nIn fact, a C program is little more than a collection of functions.\nwritten by the programmer provided as part of the C lib In C, a function is simply a series of statements that have been grouped together and given a name. Some funtions compute a value; some don\u0026rsquo;t A function that computes a value uses the return statement to specify what value it \u0026ldquo;returns\u0026rdquo;.\nmain is special: It gets called automatically when the program is executed.(The name main is critical. It can\u0026rsquo;t be start, etc\u0026hellip;) If main is a function, does it return a value?\n-\u0026gt; It returns a status code taht is given to the OS when the program terminates.\nLet\u0026rsquo;s take a look at the pun.c\n#include \u0026lt;stdio.h\u0026gt; int main(void) { printf(\u0026#34;To C, or not to C: taht is the question. \\n\u0026#34;); return 0; } The word int just before main indicates taht the main function returns an interger value.\nThe word void in parentheses indicates that main has no arguments.\nreturn 0; has two effects:\nit causes main function to terminate(For now, we\u0026rsquo;ll always have main return 0, which indicates normal rogram termination)\nIf there\u0026rsquo;s no return at the end of the main function, the program will still statement.(But many compilers will produce a warning message(because the function was supposed to return an integer but failed to.))\n","permalink":"http://localhost:1313/posts/2_c_fundamentals/","summary":"2-1 Writing a Simple Program Printing a Pun Here\u0026rsquo;s the pun: To C, or not to C: that is the question.\npun.c 라고 이름을 지을 아래 프로그램은, 실행될 때 위 메시지를 보여준다.\n#include \u0026lt;stdio.h\u0026gt; int main(void) { printf(\u0026#34;To C, or not to C: taht is the question. \\n\u0026#34;); return 0; } 섹션 2-2에서 자세한 설명. 지금은 간단하게만\n\u0026ldquo;#include \u0026lt;stdio.h\u0026gt;\u0026rdquo;. 이것은 C\u0026rsquo;s standard I/O(INPUT/OUTPUT)을 include 하기 위해 필요하다.\n프로그램의 executable code는 main 안에 있다.","title":"2_C_Fundamentals"},{"content":"1-1 History Of C Origins UNIX was written in assembly.\n-\u0026gt; painful -\u0026gt; Thompson designed \u0026ldquo;B\u0026rdquo; -\u0026gt; Ritchie joined, and rewrote a portion of UNIX in B =\u0026gt; It became C \u0026ndash;\u0026gt; Benfit: portability Standardization 1970s: C evolved \u0026amp; evolved\n80s: C hd expanded(UNIX), C compilers could run under different OS\nK\u0026amp;R was fuzzy about some language features.\nU.S. Standard for C began(1983) (American National Standards Institute,ANSI의 후원) -\u0026gt; C89, C90\nand NEW standard C99 C-based Langs C++,JAVA,C# 등 -\u0026gt; 이런 거 유명하고 많이 쓰이는데 C 왜 배움?\n-\u0026gt; greater insight into C-based langs -\u0026gt; older C programs that we may need to read,maintain -\u0026gt; 아직 널리 쓰임 1-2 C의 장단점 C\u0026rsquo;s underlying philosophy low-level: closely to a computer\u0026rsquo;s built-in instructures. Small: number of features small permissive: 내가 하는 것에 간섭 ↓ 장단점 장점 portability power flexibility standard lib Intergration with UNIX 단점 에러가 나기 쉬움 이해하기 어려울지도 hard to modify Effective use of C -\u0026gt; Taking advantages/avoid weaknesses\nLearn how to avoid C pitfalls Use software tools to make programs mroe reliable Take advantage of existing code lib Adopt a sensible set of coding conventions Avoid \u0026rsquo;tricks\u0026rsquo; and overly complex code Stick to the standard ","permalink":"http://localhost:1313/posts/1_introducing_c/","summary":"1-1 History Of C Origins UNIX was written in assembly.\n-\u0026gt; painful -\u0026gt; Thompson designed \u0026ldquo;B\u0026rdquo; -\u0026gt; Ritchie joined, and rewrote a portion of UNIX in B =\u0026gt; It became C \u0026ndash;\u0026gt; Benfit: portability Standardization 1970s: C evolved \u0026amp; evolved\n80s: C hd expanded(UNIX), C compilers could run under different OS\nK\u0026amp;R was fuzzy about some language features.\nU.S. Standard for C began(1983) (American National Standards Institute,ANSI의 후원) -\u0026gt; C89, C90","title":"1_Introducing_C"},{"content":"시험이 끝났다 1일차: 영어 과학\n2일차: 수학 도덕 한문\n3일차: 기가 역사 국어\n이번 학기 ==내 목표는 달성==했다.\n하지만 만족스럽지는 않다. 다음 학기는 목표를 조금 높여서 도전\n","permalink":"http://localhost:1313/posts/end_exam/","summary":"시험이 끝났다 1일차: 영어 과학\n2일차: 수학 도덕 한문\n3일차: 기가 역사 국어\n이번 학기 ==내 목표는 달성==했다.\n하지만 만족스럽지는 않다. 다음 학기는 목표를 조금 높여서 도전","title":"End_exam"},{"content":"기말 D - Day ","permalink":"http://localhost:1313/posts/exam/","summary":"기말 D - Day ","title":"Exam"},{"content":"\rwindows에서 수정 test입니다\n","permalink":"http://localhost:1313/posts/test/","summary":"windows에서 수정 test입니다","title":"Test"}]